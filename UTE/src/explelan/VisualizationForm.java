/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package explelan;
//import cdb.Cdb_Gui;
//import InMem.*;
//import InMem.InMemSpliter;
//import InMem.InMemView;
import XTR_Basic.XTR_BaiscView;
import XTR_Basic.XTR_BaiscView.XTR_BasicMetric;
import XTR_Basic.XTR_BasicMerger;
import XTR_Basic.XTR_BasicPredicate;
import XTR_Basic.XTR_BasicSpliter;
import XTR_Fast.XTR_FastMerger;
import XTR_Fast.XTR_FastPredicate;
import XTR_Fast.XTR_FastSpliter;
import XTR_Fast.XTR_FastView;
import XTR_Fast.XTR_FastView.XTR_FastMetric;
import explelan.View.Metric;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import metadata.ColumnSorter;
import metadata.Metadata;
import naiive.BasicMerger;
import naiive.InMView;
import naiive.InMView.Metrica;
import naiive.InNaiiveSpliter;
import naiive.InNaivePredicate;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
/**
 *
 * @author himos
 */
public class VisualizationForm extends javax.swing.JFrame {

    public static JFreeChart chart1 ;
    public DBConnection Connection= new DBConnection();
    public View AggView= new View();
  //  public InMemView InMemV= new InMemView();
    public InMView InNaiiveV= new InMView();
    public XTR_BaiscView XTR_BaiscViewV= new XTR_BaiscView();
    public XTR_FastView XTR_FastViewV= new XTR_FastView();
    
    public enum Algorithm {Naiive,XTR_Basic ,XTR_Advanced,XTR_Fast,XTR_Parallel};
    
    public Algorithm  CurrAlgorithm =Algorithm.Naiive;
    /**
     * Creates new form VisualizationForm
     */
    public VisualizationForm() {
        initComponents();
            Connection.databaseType=jComboBox1.getSelectedItem().toString().toLowerCase();
            Connection.database="127.0.0.1/postgres";
             Connection.username="postgres";
             Connection.password="himos";
             Connection.Connect();
       // jTextField1.setText(tbl);
       // jTextField2.setText(whr1);
       // jTextField3.setText(whr2);
      //  jTextField4.setText(Cdb_Gui.jComboBox1.getSelectedItem().toString());
       //         jTable2.setModel(m);
    }

    //private VisualizationForm() {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    //}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Xtrend Visualizations");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1095, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 267, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Results:");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Query");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PostgreSQL", "MYSQL" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable2FocusLost(evt);
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable2);
        jTable2.setAutoCreateRowSorter(true);

        jLabel3.setForeground(new java.awt.Color(0, 119, 255));
        jLabel3.setText("Q=");

        jLabel4.setForeground(new java.awt.Color(0, 119, 255));
        jLabel4.setText("Table :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(207, 41, 158));
        jLabel7.setText("Database Source:");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("select ttime, avg(temp)  from examp group by ttime ");
        jScrollPane2.setViewportView(jTextArea1);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setText("Plot");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Draw Target");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Explain!!!");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable6MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTable6);
        jTable2.setAutoCreateRowSorter(true);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Current Predicate");

        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Naive", "XTR_Baisc", "XTR_Advanced", "XTR_Fast", "XTR_Parallel" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 51));
        jLabel9.setText("Algorithm Type:");

        jComboBox4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(PU1) L2-norm", "(PU2) Correlation Distance", "(PI) Influence" }));
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 102, 255));
        jLabel12.setText("Metric");

        jLabel6.setForeground(new java.awt.Color(0, 119, 255));
        jLabel6.setText("Q=");

        jLabel8.setForeground(new java.awt.Color(0, 119, 255));
        jLabel8.setText("Q=");

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox2.setText("Print");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel12))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox4, 0, 199, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(149, 149, 149)
                                .addComponent(jLabel3)
                                .addGap(203, 203, 203)
                                .addComponent(jLabel6)
                                .addGap(228, 228, 228)
                                .addComponent(jLabel8)))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(14, 14, 14)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel9))
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                        .addGap(37, 37, 37))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jTable2MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
         String DBtype=jComboBox1.getSelectedItem().toString().toLowerCase();
         this.Connection.databaseType=DBtype;
         if(DBtype.equalsIgnoreCase("PostgreSQL"))
         {
             this.Connection.database="127.0.0.1/postgres";
             this.Connection.username="postgres";
             this.Connection.password="himos";
             jTextArea1.setText("select ttime, avg(temp)  from examp group by ttime ");
             
         }
         else if(DBtype.equalsIgnoreCase("MYSQL"))
         {
             this.Connection.database="127.0.0.1/expelan";
             this.Connection.username="root";
             this.Connection.password="himos";
             jTextArea1.setText("select candidate_name,sum(CONTB_RECEIPT_AMT)  from contributor group by candidate_name ");
         }
         if (this.Connection.hasConnection()){
             this.Connection.close();
             this.Connection.Connect();
         }else
             this.Connection.Connect();
       
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String  StmtQ=jTextArea1.getText().toString();
        InializeView ( this.AggView,StmtQ);
        Metadata mg = new Metadata(this.AggView.Table.toString(),this.Connection);
         
        this.AggView.VMD=mg;
        this.InNaiiveV.VMD=mg; 
        this.XTR_BaiscViewV.VMD=mg;
        this.XTR_FastViewV.VMD=mg;
        
        
       // popRestattribute(this.AggView);
        
                
        try{
            ResultSet rs=mg.ExecuteQryWithRS(StmtQ);
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            
            
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            TableColumn col = new TableColumn(model.getColumnCount());
             TableColumn col2 = new TableColumn(model.getColumnCount());
                col.setHeaderValue("Target");
                col2.setHeaderValue("Flag");
                jTable2.addColumn(col);
                jTable2.addColumn(col2);
                model.addColumn("Target");
                model.addColumn("Flag");
                //loop to update 
                for(int i=0;i<model.getRowCount();i++){
                    String val=model.getValueAt(i, 1).toString();
                   model.setValueAt(val, i, 2);
                   model.setValueAt("0", i, 3);
                }
                       // jTable2.addColumn("Target"); 
                
                //Drwa
                Dualchart Dc=new Dualchart(model);
                                       
                       jPanel1.removeAll();
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(Dc.chartPanel, BorderLayout.EAST);
                       jPanel1.add(Dc.chartPanel);
                       SwingUtilities.updateComponentTreeUI(this);
                       
                       
                        
        } catch(Exception e){
            e.printStackTrace();
        }
       
         
        //jLabel3.setText("Q:"+whr);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        // TODO add your handling code here:
        //Point2D p = jPanel1.translateScreenToJava2D(mouseChartEvent.getTrigger().getPoint());
       // ChartPanel CP=null;
//        ChartPanel CP = new ChartPanel(chart1, false);
//        Point2D p = CP.translateScreenToJava2D(mouseChartEvent.getTrigger().getPoint());
//        
//        Rectangle2D plotArea = CP.getScreenDataArea();
//        XYPlot plot = (XYPlot) chart1.getPlot(); // your plot
//        double chartX = plot.getDomainAxis().java2DToValue(p.getX(), plotArea, plot.getDomainAxisEdge());
//        double chartY = plot.getRangeAxis().java2DToValue(p.getY(), plotArea, plot.getRangeAxisEdge());
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel m = (DefaultTableModel)jTable2.getModel();
        for(int i=0;i<m.getRowCount();i++){
                
            double flg=Double.parseDouble(m.getValueAt(i, 1).toString())/ Double.parseDouble(m.getValueAt(i, 2).toString());
            m.setValueAt(flg, i, 3);
            }
        Dualchart Dc= new Dualchart(m);
        jPanel1.removeAll();
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(Dc.chartPanel, BorderLayout.EAST);
                       jPanel1.add(Dc.chartPanel);
                       SwingUtilities.updateComponentTreeUI(this);
//        try{
//         Metadata mg = new Metadata("examp","postgresql", "127.0.0.1/postgres", "postgres", "himos");
//         Map<String, String> corrAttributes=mg.getColumnAttributes();
//        }
//        catch (Exception e){
//        e.printStackTrace();
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // Running XTR Engine :)
        
        if (jComboBox2.getSelectedItem().toString().equalsIgnoreCase("Naive"))
            Run_Naiive();
        else if (jComboBox2.getSelectedItem().toString().equalsIgnoreCase("XTR_Baisc")){
            
            this.CurrAlgorithm=Algorithm.XTR_Basic;
            Run_XTR_Basic();
        }
         else if (jComboBox2.getSelectedItem().toString().equalsIgnoreCase("XTR_Advanced")){
            
            this.CurrAlgorithm=Algorithm.XTR_Advanced;
            Run_XTR_Advanced();
        }
        else if (jComboBox2.getSelectedItem().toString().equalsIgnoreCase("XTR_Parallel")){
            
            this.CurrAlgorithm=Algorithm.XTR_Advanced;
            Run_XTR_Parallel();
        }
        
        else if (jComboBox2.getSelectedItem().toString().equalsIgnoreCase("XTR_Fast")){
            
            this.CurrAlgorithm=Algorithm.XTR_Fast;
            Run_XTR_Fast_Advanced();
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        Dualchart chrt= new Dualchart(model);
        
        if(jTable6.getRowCount()>0){
            int i=jTable6.getSelectedRow();
            String Predname=jTable6.getValueAt(i, 1).toString();
            
            if(this.CurrAlgorithm==Algorithm.Naiive){
                    
                InNaivePredicate SelP =new InNaivePredicate();
                SelP.View=this.InNaiiveV;
               // SelP.M=this.InNaiiveV.VMD;
                
                SelP=SelP.FindPredicate(Predname);
                
                //Draw either Line or bar
                chrt.addnewlineNaiive(Predname, SelP.PredAggData,this.InNaiiveV);
                //chrt.addnewBarNaiive(Predname, SelP.PredAggData,this.InNaiiveV);
                
                
                System.out.println(Predname);
            
            }
            
            else if(this.CurrAlgorithm==Algorithm.XTR_Basic || this.CurrAlgorithm==Algorithm.XTR_Advanced){
                    
                XTR_BasicPredicate SelP= new XTR_BasicPredicate();
                SelP.View=this.XTR_BaiscViewV;
                
                SelP=SelP.FindPredicate(Predname);
                chrt.addnewlineXTR_BasicView(Predname, SelP.PredAggData,this.XTR_BaiscViewV);
            }
            
            else if(this.CurrAlgorithm==Algorithm.XTR_Fast ){
                    
                XTR_FastPredicate SelP= new XTR_FastPredicate();
                SelP.View=this.XTR_FastViewV;
                
                SelP=SelP.FindPredicate(Predname);
                chrt.addnewlineXTR_FastView(Predname, SelP.PredAggData,this.XTR_FastViewV);
            }
//                                                Predicate SelP=new Predicate();
//                                                 // InMemPredicate SelP=new InMemPredicate();
//                                                 SelP.View=this.AggView;
//                                                 SelP.M=this.AggView.VMD;
//                                                 SelP.PredName=Predname;
//                                                 SelP.PredicateWehe= Predname;    
            
             jPanel1.removeAll();
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chrt.chartPanel, BorderLayout.EAST);
                       jPanel1.add(chrt.chartPanel);
                       SwingUtilities.updateComponentTreeUI(this);
            
        }
    }//GEN-LAST:event_jTable6MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jTable2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable2FocusLost
        // TODO add your handling code here:
//        DefaultTableModel m = (DefaultTableModel)jTable2.getModel();
//        for(int i=0;i<m.getRowCount();i++){
//                
//            double flg=Double.parseDouble(m.getValueAt(i, 1).toString())/ Double.parseDouble(m.getValueAt(i, 2).toString());
//            m.setValueAt(flg, i, 3);
//            }
//        Dualchart Dc= new Dualchart(m);
//        jPanel1.removeAll();
//                       jPanel1.setLayout(new BorderLayout());
//                       jPanel1.add(Dc.chartPanel, BorderLayout.EAST);
//                       jPanel1.add(Dc.chartPanel);
////                       SwingUtilities.updateComponentTreeUI(this);
    }//GEN-LAST:event_jTable2FocusLost

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    /**
     * @param args the command line arguments
     */
    

 public void InializeView (View V,String Query){
    
       String Whr="";
        String Table="";
        String Temp="";
        if(!Query.toLowerCase().contains("where")){
         Whr="";
         Table=Query.substring( Query.toLowerCase().lastIndexOf("from")+5, Query.toLowerCase().indexOf(" group by"));
         Temp=Query.toLowerCase();
        }
        else{
            
             Whr=Query.substring(Query.toLowerCase().indexOf("where ")+5 , Query.toLowerCase().indexOf(" group by"));
              Table=Query.substring( Query.toLowerCase().lastIndexOf("from")+5, Query.toLowerCase().indexOf(" where"));
              Temp=Query.substring(0,Query.toLowerCase().indexOf("where ")+5);
        }
        String GrpAtt=Temp.substring(Temp.toLowerCase().indexOf("select")+6,Temp.indexOf(","));
        
        Temp=Temp.substring(Temp.indexOf(",")+1,Temp.length());
        String AggAtt=Temp.substring(Temp.lastIndexOf("(")+1,Temp.lastIndexOf(")"));
        String AggFun=Temp.substring(0, Temp.lastIndexOf("("));
        
        jLabel4.setText("Table:"+Table);
        jLabel3.setText("Aggregated Att:"+AggFun+"("+AggAtt+")");
        jLabel6.setText("Group By Att:"+GrpAtt);
        jLabel8.setText("Where :"+Whr);
        //Setting up View
        V.Table=Table.replaceAll(" ", "");
        V.AggAtt=AggAtt.replaceAll(" ", "");
        V.GrbyAtt=GrpAtt.replaceAll(" ", "");
        V.AggFun=AggFun.replaceAll(" ", "");;
        V.WhrCond=Whr;
        
        System.out.println("Inialtlizing:.......");
        System.out.println("Table:"+Table);
        System.out.println("Aggregated Att:"+AggFun+"("+AggAtt+")");
        System.out.println("Aggregated Function:"+AggFun);
        System.out.println("Group By Att:"+GrpAtt);
        System.out.println("Where :"+Whr);
              
       
        
        
}
 /*
 public void InializeInMemView (View V,InMemView InMemV,String Query){
    
        String Whr="";
        String Table="";
        String Temp="";
        if(!Query.toLowerCase().contains("where")){
         Whr="";
         Table=Query.substring( Query.toLowerCase().lastIndexOf("from")+5, Query.toLowerCase().indexOf(" group by"));
         Temp=Query.toLowerCase();
        }
        else{
            
             Whr=Query.substring(Query.toLowerCase().indexOf("where ")+5 , Query.toLowerCase().indexOf(" group by"));
              Table=Query.substring( Query.toLowerCase().lastIndexOf("from")+5, Query.toLowerCase().indexOf(" where"));
              Temp=Query.substring(0,Query.toLowerCase().indexOf("where ")+5);
        }
        String GrpAtt=Temp.substring(Temp.toLowerCase().indexOf("select ")+6,Temp.indexOf(","));
        
        Temp=Temp.substring(Temp.indexOf(",")+1,Temp.length());
        String AggAtt=Temp.substring(Temp.lastIndexOf("(")+1,Temp.lastIndexOf(")"));
        String AggFun=Temp.substring(0, Temp.lastIndexOf("("));
        
//        jLabel4.setText("Table:"+Table);
//        jLabel3.setText("Aggregated Att:"+AggFun+"("+AggAtt+")");
//        jLabel6.setText("Group By Att:"+GrpAtt);
//        jLabel8.setText("Where :"+Whr);
        InMemV.Table=V.Table.replaceAll(" ", "");
        InMemV.AggAtt=V.AggAtt.replaceAll(" ", "");
        InMemV.GrbyAtt=V.GrbyAtt.replaceAll(" ", "");
        InMemV.AggFun=V.AggFun.replaceAll(" ", "");
        InMemV.WhrCond=V.WhrCond;
        //Setting up View
        V.Table=Table.replaceAll(" ", "");
        V.AggAtt=AggAtt.replaceAll(" ", "");
        V.GrbyAtt=GrpAtt.replaceAll(" ", "");
        V.AggFun=AggFun.replaceAll(" ", "");
        V.WhrCond=Whr;
       
        
//        System.out.println("Inialtlizing:.......");
//        System.out.println("Table:"+Table);
//        System.out.println("Aggregated Att:"+AggFun+"("+AggAtt+")");
//        System.out.println("Aggregated Function:"+AggFun);
//        System.out.println("Group By Att:"+GrpAtt);
//        System.out.println("Where :"+Whr);
              
       
        
        
}
*/
 public void popRestattribute(View V){
   
                DefaultComboBoxModel Model = new DefaultComboBoxModel();
		try {
                    String ExculdAtt=V.AggAtt+","+V.GrbyAtt+","+V.WhrCond;
			
                        Map<String, String> columnAttributes = V.VMD.getColumnAttributes();
                        
                   for (Map.Entry<String, String> columnAttribute1 : columnAttributes.entrySet()){
		
			String name = columnAttribute1.getKey().toString();
                        if (!ExculdAtt.contains(name))
                        //System.out.println(name);
                        Model.addElement(name);
			
		}
                 //  jComboBox3.setModel(Model);
                   

		} catch (SQLException e) {
			//System.out.println("Error in executing metadata query");
			e.printStackTrace();
			
		}
}

 public void getNormalizeVal(View V){

        double MaxlinesVal=0;
        double MaxAttrDB=0;
        for(int i=0; i<V.lines.getRowCount();i++){
            double ValResult=Double.parseDouble( V.lines.getValueAt(i, 1).toString());
            double ValTarget=Double.parseDouble( V.lines.getValueAt(i, 2).toString());
            if (MaxlinesVal<Math.max(ValTarget, ValResult))
                MaxlinesVal=Math.max(ValTarget, ValResult);
        }
        
        try{
            if(V.WhrCond.length()>0)
             MaxAttrDB=V.VMD.getMax(V.AggAtt," where "+ V.WhrCond);
            else
                 MaxAttrDB=V.VMD.getMax(V.AggAtt, V.WhrCond);
            
             V.NormalizeV= Math.max(MaxlinesVal,MaxAttrDB);
        } catch(Exception e){
            e.printStackTrace();
        }
   
}

 public DefaultTableModel CombinResults(DefaultTableModel AllPre,DefaultTableModel Merged){
     
     DefaultTableModel AfterMege=new DefaultTableModel();
        Vector AfterMegeH=new Vector<String>();
                AfterMegeH.add("PredName");
                AfterMegeH.add("PredicateWehe");
                AfterMegeH.add("NoRecods");
                AfterMegeH.add("ValueafterDel");
                AfterMegeH.add("Influence");
                AfterMegeH.add("PU2-DistanceCorr");
                AfterMegeH.add("PU1-L2 norm");
                 
         Vector AllPredicates_data = AllPre.getDataVector();
         Vector MergedPredicates_data = Merged.getDataVector();
         
         
         Vector merge = new Vector <String>();
         merge.addAll(AllPredicates_data);
         merge.addAll(MergedPredicates_data);
         AfterMege.setDataVector(merge, AfterMegeH);
        // AfterMege.get
         Collections.sort(merge, new ColumnSorter(6, true)); 
         return AfterMege;
 }






public void DrawTarget(DefaultTableModel m){
        
        String dim=m.getColumnName(0).toString();
        String measure=m.getColumnName(1).toString();;
        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
        for(int i=0;i<m.getRowCount();i++){
            String attr=m.getValueAt(i, 0).toString();
            double val= Double.parseDouble( m.getValueAt(i, 1).toString());
            double Tval=Double.parseDouble( m.getValueAt(i, 2).toString());
             dataset1.addValue(val,"Results",attr);
             dataset2.addValue(Tval,"Expected",attr);
        }
        
            CategoryItemRenderer renderer = new BarRenderer();
            renderer.setItemLabelsVisible(true);
        
        CategoryPlot plot = new CategoryPlot();
        plot.setDataset(dataset1);
        plot.setRenderer(renderer);
        plot.setDomainAxis(new CategoryAxis(dim));
        plot.setRangeAxis(new NumberAxis(measure));
        
        plot.setOrientation(PlotOrientation.VERTICAL);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinesVisible(true);
        
        CategoryItemRenderer renderer2 = new LineAndShapeRenderer();
        plot.setDataset(1, dataset2);
        plot.setRenderer(1, renderer2);
        plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
        JFreeChart chart = new JFreeChart(plot);
        chart.setTitle(" Bar Chart");
        
       
      //  chart.setLegend(new StandardLegend());

        // add the chart to a panel...
        //ChartPanel chartPanel = new ChartPanel(chart);
        //chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        //setContentPane(chartPanel);
        
        ////
        jPanel1.removeAll();
                        //CategoryPlot plot2 = (CategoryPlot)chart.getPlot();
                        //plot2.setDomainGridlinePaint(Color.ORANGE);
                        //chart.setBackgroundPaint(Color.BLACK);
                       // chart.setBackgroundImageAlpha(2);
                       // ChartUtilities.applyCurrentTheme(chart);
                        //ChartColor
                       // CategoryAxis xAxis2 = (CategoryAxis)plot2.getDomainAxis();
                       // xAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel2 = new ChartPanel(chart, false);
                       
                        
                     //  chartPanel2.setBackground(Color.BLUE);
                      // chartPanel2.setForeground(Color.BLUE);
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chartPanel2, BorderLayout.EAST);
                       jPanel1.add(chartPanel2);
                        SwingUtilities.updateComponentTreeUI(this);
}


public void Run_Naiive (){
    
      
        //Current using is ======(Naiive)=========
        
        this.CurrAlgorithm =Algorithm.Naiive;
        ////Start..........
        
         try{
        
             this.InNaiiveV.InializeView(jTextArea1.getText());
             this.InNaiiveV.lines=(DefaultTableModel) jTable2.getModel();
             this.InNaiiveV.NormalizeV=1.0;
           
         System.out.println("Normalize: "+this.InNaiiveV.NormalizeV);
             
        
         // Get Metric 
          if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU1) L2-norm")){
              this.InNaiiveV.CurrMetic=Metrica.PU_l2_norm;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU2) Correlation Distance")){
              this.InNaiiveV.CurrMetic=Metrica.PU_Corr_distnace;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PI) Influence")){
              this.AggView.CurrMetic=Metric.PI_Influence;
          }
         
          
          
         // Start Naiive Splitter Metadata
          DefaultTableModel AllPredicates= new DefaultTableModel();
            InNaiiveSpliter NaiiveSplit= new InNaiiveSpliter();
         //this.AggView.GetTargetAggMean();
         NaiiveSplit.MD= new Metadata(this.InNaiiveV.Table.toString(), this.Connection);
         NaiiveSplit.V=this.InNaiiveV;
         
         long startSPTime = System.currentTimeMillis();
         System.out.println("===========Splitter===========");
          
              System.out.println("Selecting Naive Splitting....!! ");
             startSPTime = System.currentTimeMillis();
              
              AllPredicates= NaiiveSplit.NaiiveSplitting();
         
          
            long EndSpTime=(System.currentTimeMillis()-startSPTime );
            System.out.println("=========== Splitting Finished ===========");
            System.out.println("Splitter Execution time: "+EndSpTime);
           //EndSpTime=EndSpTime /1000;
            int Spliited_PredicatesCount=this.InNaiiveV.AllSortedPredicates.getRowCount();
           
           
                BasicMerger Merger =new BasicMerger();
                Merger.CurView=this.InNaiiveV;
                Merger.Md=this.InNaiiveV.VMD;
                System.out.println("===========Start Merging  ===========");
                System.out.println("Basic Merging ....!! ");
                long MergsTime= System.currentTimeMillis();
                Merger.Start();
                 long EndMrgTime=( System.currentTimeMillis()-MergsTime);
                 int Merged_PredicatesCount=this.InNaiiveV.AllSortedPredicates.getRowCount()-Spliited_PredicatesCount;
                
                System.out.println("Spliited Predicates Count = "+Spliited_PredicatesCount);
                System.out.println("Splitter Execution time: "+EndSpTime);
                System.out.println("Merged Predicates Count = "+Merged_PredicatesCount);
                System.out.println("Merger Execution time: "+EndMrgTime);
                
                System.out.println("=========================================");
                System.out.println("===========Xtrend Naiive Finished :) ===========");
                System.out.println("Total Generated  Predicates : "+(Spliited_PredicatesCount+Merged_PredicatesCount));
                System.out.println("Total Execution Time   : "+(EndSpTime+EndMrgTime));
                System.out.println("=========================================");
 
           jTable6.setModel(this.InNaiiveV.AllSortedPredicates);
         
         //sp.Start(sp.MaxSplitAtt);
        
         
         
         } catch(Exception e){
             e.printStackTrace();
         }
}

public void Run_XTR_Basic (){
    
             //Current using is ======(XTR Basic)=========
        
       // this.CurrAlgorithm =Algorithm.XTR_Basic;
        ////Start..........
        
         try{
             
             
        
           
             this.XTR_BaiscViewV.lines=(DefaultTableModel) jTable2.getModel();
             this.XTR_BaiscViewV.InializeView(jTextArea1.getText());
             
             this.XTR_BaiscViewV.NormalizeV=1.0;
           
             
         
         System.out.println("Normalize: "+this.XTR_BaiscViewV.NormalizeV);
             
        
         // Get Metric 
          if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU1) L2-norm")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_l2_norm;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU2) Correlation Distance")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_Corr_distnace;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PI) Influence")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PI_Influence;
          }
         
          
          
         // Start XTR Basic Splitter Metadata
          XTR_BasicSpliter XTRBasic_Spliter=new XTR_BasicSpliter();
          XTRBasic_Spliter.V=this.XTR_BaiscViewV;
          XTRBasic_Spliter.MD=this.XTR_BaiscViewV.VMD;
          
            long startSPTime = System.currentTimeMillis();
                      XTRBasic_Spliter.Splitting();
            long EndSpTime=(System.currentTimeMillis()-startSPTime );
             
            System.out.println("=========== Splitting Finished ===========");
            System.out.println("Splitter Execution time: "+EndSpTime);
           //EndSpTime=EndSpTime /1000;
            int Spliited_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount();
           
            
                XTR_BasicMerger Merger =new XTR_BasicMerger();
                Merger.CurView=this.XTR_BaiscViewV;
                Merger.Md=this.XTR_BaiscViewV.VMD;
                System.out.println("===========Start Merging  ===========");
                System.out.println("Basic Merging ....!! ");
                long MergsTime= System.currentTimeMillis();
                Merger.Start_Basic();
                 long EndMrgTime=( System.currentTimeMillis()-MergsTime);
                 int Merged_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount()-Spliited_PredicatesCount;
                
                System.out.println("Spliited Predicates Count = "+Spliited_PredicatesCount);
                System.out.println("Splitter Execution time: "+EndSpTime);
                System.out.println("Merged Predicates Count = "+Merged_PredicatesCount);
                System.out.println("Merger Execution time: "+EndMrgTime);
                System.out.println("=========================================");
                System.out.println("===========Xtrend Basic Finished :) ===========");
                System.out.println("Total Generated  Predicates : "+(Spliited_PredicatesCount+Merged_PredicatesCount));
                System.out.println("Total Execution Time   : "+(EndSpTime+EndMrgTime));
                System.out.println("=========================================");
          
            jTable6.setModel(this.XTR_BaiscViewV.AllSortedPredicates);
            
         }
         catch(Exception e){
             e.printStackTrace();
         }
}

   public void Run_XTR_Advanced (){
    
             //Current using is ======(XTR Advanced)=========
        
      this.CurrAlgorithm =Algorithm.XTR_Advanced;
        ////Start..........
        
         try{
             
             
        
           
             this.XTR_BaiscViewV.lines=(DefaultTableModel) jTable2.getModel();
             this.XTR_BaiscViewV.InializeView(jTextArea1.getText());
             
             this.XTR_BaiscViewV.NormalizeV=1.0;
           
             
         
         System.out.println("Normalize: "+this.XTR_BaiscViewV.NormalizeV);
             
        
         // Get Metric 
          if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU1) L2-norm")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_l2_norm;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU2) Correlation Distance")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_Corr_distnace;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PI) Influence")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PI_Influence;
          }
         
          
          
         // Start XTR Basic Splitter Metadata
          XTR_BasicSpliter XTRBasic_Spliter=new XTR_BasicSpliter();
          XTRBasic_Spliter.V=this.XTR_BaiscViewV;
          XTRBasic_Spliter.MD=this.XTR_BaiscViewV.VMD;
          
            long startSPTime = System.currentTimeMillis();
                      XTRBasic_Spliter.Splitting();
            long EndSpTime=(System.currentTimeMillis()-startSPTime );
             
            System.out.println("=========== Splitting Finished ===========");
            System.out.println("Splitter Execution time: "+EndSpTime);
           //EndSpTime=EndSpTime /1000;
            int Spliited_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount();
           
            
                XTR_BasicMerger Merger =new XTR_BasicMerger();
                Merger.CurView=this.XTR_BaiscViewV;
                Merger.Md=this.XTR_BaiscViewV.VMD;
                System.out.println("===========Start Merging  ===========");
                System.out.println("Basic Merging ....!! ");
                long MergsTime= System.currentTimeMillis();
                Merger.Start_Advanced();
                 long EndMrgTime=( System.currentTimeMillis()-MergsTime);
                 int Merged_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount()-Spliited_PredicatesCount;
                
                System.out.println("Spliited Predicates Count = "+Spliited_PredicatesCount);
                System.out.println("Splitter Execution time: "+EndSpTime);
                System.out.println("Merged Predicates Count = "+Merged_PredicatesCount);
                System.out.println("Merger Execution time: "+EndMrgTime);
                System.out.println("=========================================");
                System.out.println("===========Xtrend Advanced Finished :) ===========");
                System.out.println("Total Generated  Predicates : "+(Spliited_PredicatesCount+Merged_PredicatesCount));
                System.out.println("Total Execution Time   : "+(EndSpTime+EndMrgTime));
                System.out.println("=========================================");
          
            jTable6.setModel(this.XTR_BaiscViewV.AllSortedPredicates);
            
         }
         catch(Exception e){
             e.printStackTrace();
         }
}
   
    public void Run_XTR_Fast_Advanced (){
    
             //Current using is ======(XTR Advanced)=========
        
      this.CurrAlgorithm =Algorithm.XTR_Fast;
        ////Start..........
        
         try{
             
             
        
           
             this.XTR_FastViewV.lines=(DefaultTableModel) jTable2.getModel();
             this.XTR_FastViewV.InializeView(jTextArea1.getText());
             
             this.XTR_FastViewV.NormalizeV=1.0;
           
             
         
         System.out.println("Normalize: "+this.XTR_FastViewV.NormalizeV);
             
        
         // Get Metric 
          if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU1) L2-norm")){
              this.XTR_FastViewV.CurrMetic=XTR_FastMetric.PU_l2_norm;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU2) Correlation Distance")){
              this.XTR_FastViewV.CurrMetic=XTR_FastMetric.PU_Corr_distnace;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PI) Influence")){
              this.XTR_FastViewV.CurrMetic=XTR_FastMetric.PI_Influence;
          }
         
          
          
         // Start XTR Basic Splitter Metadata
          XTR_FastSpliter XTRBasic_Spliter=new XTR_FastSpliter();
          XTRBasic_Spliter.V=this.XTR_FastViewV;
          XTRBasic_Spliter.MD=this.XTR_FastViewV.VMD;
          
            long startSPTime = System.currentTimeMillis();
                      XTRBasic_Spliter.Splitting();
            long EndSpTime=(System.currentTimeMillis()-startSPTime );
             
            System.out.println("=========== Splitting Finished ===========");
            System.out.println("Splitter Execution time: "+EndSpTime);
           //EndSpTime=EndSpTime /1000;
            int Spliited_PredicatesCount=this.XTR_FastViewV.AllSortedPredicates.getRowCount();
           
            
                XTR_FastMerger Merger =new XTR_FastMerger();
                Merger.CurView=this.XTR_FastViewV;
                Merger.Md=this.XTR_FastViewV.VMD;
                System.out.println("===========Start Merging  ===========");
                System.out.println("Advanced Merging ....!! ");
                long MergsTime= System.currentTimeMillis();
                Merger.Start_Advanced();
                 long EndMrgTime=( System.currentTimeMillis()-MergsTime);
                 int Merged_PredicatesCount=this.XTR_FastViewV.AllSortedPredicates.getRowCount()-Spliited_PredicatesCount;
                
                System.out.println("Spliited Predicates Count = "+Spliited_PredicatesCount);
                System.out.println("Splitter Execution time: "+EndSpTime);
                System.out.println("Merged Predicates Count = "+Merged_PredicatesCount);
                System.out.println("Merger Execution time: "+EndMrgTime);
                System.out.println("=========================================");
                System.out.println("===========Xtrend Fast-Advanced Finished :) ===========");
                System.out.println("Total Generated  Predicates : "+(Spliited_PredicatesCount+Merged_PredicatesCount));
                System.out.println("Total Execution Time   : "+(EndSpTime+EndMrgTime));
                System.out.println("=========================================");
          
            jTable6.setModel(this.XTR_FastViewV.AllSortedPredicates);
            
         }
         catch(Exception e){
             e.printStackTrace();
         }
}
   
   
   public void Run_XTR_Parallel (){
    
             //Current using is ======(XTR Advanced)=========
        
      this.CurrAlgorithm =Algorithm.XTR_Advanced;
        ////Start..........
        
         try{
             
             
        
           
             this.XTR_BaiscViewV.lines=(DefaultTableModel) jTable2.getModel();
             this.XTR_BaiscViewV.InializeView(jTextArea1.getText());
             
             this.XTR_BaiscViewV.NormalizeV=1.0;
           
             
         
         System.out.println("Normalize: "+this.XTR_BaiscViewV.NormalizeV);
             
        
         // Get Metric 
          if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU1) L2-norm")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_l2_norm;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PU2) Correlation Distance")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PU_Corr_distnace;
          }
          else if (jComboBox4.getSelectedItem().toString().equalsIgnoreCase("(PI) Influence")){
              this.XTR_BaiscViewV.CurrMetic=XTR_BasicMetric.PI_Influence;
          }
         
          
          
         // Start XTR Basic Splitter Metadata
          XTR_BasicSpliter XTRBasic_Spliter=new XTR_BasicSpliter();
          XTRBasic_Spliter.V=this.XTR_BaiscViewV;
          XTRBasic_Spliter.MD=this.XTR_BaiscViewV.VMD;
          
            long startSPTime = System.currentTimeMillis();
                      XTRBasic_Spliter.Splitting_Parallel();
            long EndSpTime=(System.currentTimeMillis()-startSPTime );
             
            System.out.println("=========== Splitting Finished ===========");
            System.out.println("Splitter Execution time: "+EndSpTime);
           //EndSpTime=EndSpTime /1000;
            int Spliited_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount();
           
            
                XTR_BasicMerger Merger =new XTR_BasicMerger();
                Merger.CurView=this.XTR_BaiscViewV;
                Merger.Md=this.XTR_BaiscViewV.VMD;
                System.out.println("===========Start Merging  ===========");
                System.out.println("Basic Merging ....!! ");
                long MergsTime= System.currentTimeMillis();
                Merger.Start_Advanced();
                 long EndMrgTime=( System.currentTimeMillis()-MergsTime);
                 int Merged_PredicatesCount=this.XTR_BaiscViewV.AllSortedPredicates.getRowCount()-Spliited_PredicatesCount;
                
                System.out.println("Spliited Predicates Count = "+Spliited_PredicatesCount);
                System.out.println("Splitter Execution time: "+EndSpTime);
                System.out.println("Merged Predicates Count = "+Merged_PredicatesCount);
                System.out.println("Merger Execution time: "+EndMrgTime);
                System.out.println("=========================================");
                System.out.println("===========Xtrend Parallel Finished :) ===========");
                System.out.println("Total Generated  Predicates : "+(Spliited_PredicatesCount+Merged_PredicatesCount));
                System.out.println("Total Execution Time   : "+(EndSpTime+EndMrgTime));
                System.out.println("=========================================");
          
            jTable6.setModel(this.XTR_BaiscViewV.AllSortedPredicates);
            
         }
         catch(Exception e){
             e.printStackTrace();
         }
}

  
    

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualizationForm().setVisible(true);
            }
        });
    }

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable6;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
